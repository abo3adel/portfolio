{"id":2,"user_id":1,"category_id":1,"title":"Laravel Tutorial Building Your First Laravel Application Part 2","slug":"laravel-tutorial-building-your-first-laravel-application-part-2","body":"    <p>\r\n        In the previous post part 1 we learned how to install laravel and get it to\r\n        work.\r\n    <\/p>\r\n    <p>now we will continue in our tasks application.<\/p>\r\n    <p>\r\n        I am attempting to go through the process of creating a new application just\r\n        as I would in a real-world environment.\r\n    <\/p>\r\n    <hr \/>\r\n    <p>This Tutorial is divided into parts:<\/p>\r\n    <ol>\r\n        <li>\r\n            <a\r\n                href=\"\/blog\/laravel-tutorial-building-your-first-laravel-application-part-1\"\r\n                >part 1<\/a\r\n            >\r\n        <\/li>\r\n        <li>\r\n            <strong\r\n                ><span class=\"text-secondary\" data-tomark-pass=\"\"\r\n                    >Part 2<\/span\r\n                ><\/strong\r\n            >\r\n        <\/li>\r\n        <li>\r\n            <a\r\n                href=\"\/blog\/laravel-tutorial-building-your-first-laravel-application-part-3\"\r\n                >part 3<\/a\r\n            >\r\n        <\/li>\r\n        <li>\r\n            <a\r\n                href=\"\/blog\/laravel-tutorial-building-your-first-laravel-application-part-4\"\r\n                >Part 4<\/a\r\n            >\r\n        <\/li>\r\n        <li>\r\n            <a\r\n                href=\"\/blog\/laravel-tutorial-building-your-first-laravel-application-part-5\"\r\n                >part 5<\/a\r\n            >\r\n        <\/li>\r\n    <\/ol>\r\n    <hr \/>\r\n    <p>\r\n        <strong>Note<\/strong> The complete, finished source code for this project is\r\n        <a\r\n            target=\"_blank\"\r\n            href=\"https:\/\/github.com\/abo3adel\/laravel-tutorialyour-first-app\"\r\n            >available on GitHub<\/a\r\n        >.\r\n    <\/p>\r\n    <h2>Planning<\/h2>\r\n    <p>\r\n        <strong\r\n            >For this guide, we are going to be building a to-do-list\r\n            application.<br data-tomark-pass=\"\" \/>\r\n            Here is a list of fundamental goals for this to-do-list app:<\/strong\r\n        >\r\n    <\/p>\r\n    <ol>\r\n        <li>Display a simple list of tasks.<\/li>\r\n        <li>Create a form where people can submit new tasks.<\/li>\r\n        <li>Validate the form.<\/li>\r\n        <li>Insert the data into the database.<\/li>\r\n        <li>Add the ability manage tasks (complete task or delete it).<\/li>\r\n    <\/ol>\r\n    <h2>The First Steps<\/h2>\r\n    <p>\r\n        Navigate to our project folder that we created the\r\n        <a\r\n            target=\"_blank\"\r\n            href=\"\/blog\/posts\/Laravel-Tutorial:-Building-Your-First-Laravel-Application\"\r\n            >previous post<\/a\r\n        >\r\n    <\/p>\r\n    <blockquote>\r\n        <p>\r\n            Even though showing a list of tasks sounds like a small task it still\r\n            requires a database, a database table, data in the table, a database\r\n            query, and a view file.\r\n        <\/p>\r\n    <\/blockquote>\r\n    <h2>Building the App<\/h2>\r\n    <p>\r\n        Creating a migration will be the first step.<br data-tomark-pass=\"\" \/><br \/>\r\n        open your terminal and cd into your project folder, then use laravel artisan\r\n        to create our migration:\r\n    <\/p>\r\n    <pre\r\n        class=\"lang-bash\"\r\n    ><code data-language=\"bash\"> php artisan make:migration create_tasks_table --create=tasks\r\n    <\/code><\/pre>\r\n    <p>\r\n        then go and open\r\n        <code data-backticks=\"3\"\r\n            >database\/migrations\/{{datetime}}_create_tasks_table.php<\/code\r\n        >\r\n        and let`s create out tasks table.<br data-tomark-pass=\"\" \/>\r\n    <\/p>\r\n    <h3>What do we need for a task<\/h3>\r\n    <ol>\r\n        <li>task has body.<\/li>\r\n        <li>\r\n            task can be completed.<br data-tomark-pass=\"\" \/><br \/>\r\n            So our table will be like\r\n        <\/li>\r\n    <\/ol>\r\n    <pre\r\n        class=\"lang-php\"\r\n    ><code data-language=\"php\">\r\n    Schema::create('tasks', function (Blueprint $table) {\r\n        $table-&gt;bigIncrements('id');\r\n        $table-&gt;string('body');\r\n        $table-&gt;boolean('completed')-&gt;default(false);\r\n        $table-&gt;timestamps();\r\n    });\r\n    <\/code><\/pre>\r\n    <p>and type on terminal<\/p>\r\n    <pre class=\"lang-bash\"><code data-language=\"bash\">php artisan migrate\r\n    <\/code><\/pre>\r\n    <p>\r\n        <strong>Note<\/strong> if you have seen an error like\r\n        <code data-backticks=\"3\">Specified key was too long;<\/code>,\r\n        <br data-tomark-pass=\"\" \/>then you can fix it by adding this line into\r\n        <code data-backticks=\"3\">app\/providers\/AppServiceProvider.php<\/code>\r\n    <\/p>\r\n    <pre\r\n        class=\"lang-php\"\r\n    ><code data-language=\"php\">\r\n    use Illuminate\\Support\\Facades\\Schema;\r\n\r\n    public function boot()\r\n    {\r\n        \/\/ -----\r\n        Schema::defaultStringLength(169); \/\/ add this line\r\n    }\r\n    <\/code><\/pre>\r\n    <p>now run<\/p>\r\n    <pre class=\"lang-php\"><code data-language=\"php\">\r\n    php artisan migrate:fresh\r\n    php artisan migrate\r\n    <\/code><\/pre>\r\n    <p>and you table should be created correctly.<\/p>\r\n    <p>\r\n        Next, we need some data and a model to work with our database table.<br\r\n            data-tomark-pass=\"\"\r\n        \/>Laravel provides two features which help with this:<br\r\n            data-tomark-pass=\"\"\r\n        \/>\r\n        <strong>the first<\/strong> is a\r\n        <span class=\"text-info\" data-tomark-pass=\"\">database seeder<\/span>, which\r\n        populates the database with data,<br data-tomark-pass=\"\" \/>\r\n        <strong>The second<\/strong>, the\r\n        <span class=\"text-info\" data-tomark-pass=\"\">model factory files<\/span> that\r\n        allow us to generate fake model data that we can\r\n        <strong>use to fill our development database and tests<\/strong>:\r\n    <\/p>\r\n    <pre\r\n        class=\"lang-bash\"\r\n    ><code data-language=\"bash\"> php artisan make:model -f Task\r\n    <\/code><\/pre>\r\n    <p>\r\n        The --f flag will generate a new factory file in the &nbsp;<code\r\n            data-backticks=\"3\"\r\n            >database\/factories<\/code\r\n        >\r\n        path, in our case a new TaskFactory file will include an empty factory\r\n        definition for our Task model.\r\n    <\/p>\r\n    <pre\r\n        class=\"lang-php\"\r\n    ><code data-language=\"php\">\r\n    \/** @var \\Illuminate\\Database\\Eloquent\\Factory $factory *\/\r\n\r\n    use App\\Task;\r\n    use Faker\\Generator as Faker;\r\n\r\n    $factory-&gt;define(Task::class, function (Faker $faker) {\r\n        return [\r\n            'body' =&gt; $faker-&gt;sentence,\r\n            'completed' =&gt; false \/\/ true || false\r\n        ];\r\n    });\r\n\r\n    <\/code><\/pre>\r\n    <p>\r\n        We use the &nbsp;<code data-backticks=\"3\">$faker-&gt;sentence<\/code> to\r\n        create random task body.<br data-tomark-pass=\"\" \/><br \/>\r\n        Then we will need an database seeder to run our factory\r\n    <\/p>\r\n    <pre\r\n        class=\"lang-bash\"\r\n    ><code data-language=\"bash\">php artisan make:seeder TaskTableSeeder\r\n    <\/code><\/pre>\r\n    <p>\r\n        now go to &nbsp;<code data-backticks=\"3\">database\/seeds<\/code> and open\r\n        &nbsp;<code data-backticks=\"3\">TaskTableSeeder.php<\/code>\r\n    <\/p>\r\n    <pre\r\n        class=\"lang-php\"\r\n    ><code data-language=\"php\">factory(Task::class, 7)-&gt;create(); \/\/ will create 7 tasks\r\n    <\/code><\/pre>\r\n    <p>\r\n        In order to \"activate\" the TaskTableSeeder, we need to call it from the main\r\n        &nbsp;<code data-backticks=\"3\">database\/seeds\/DatabaseSeeder.php<\/code> run\r\n        method:\r\n    <\/p>\r\n    <pre class=\"lang-php\"><code data-language=\"php\">\r\n    public function run()\r\n    {\r\n        $this-&gt;call(TaskTableSeeder::class);\r\n    }\r\n    <\/code><\/pre>\r\n    <p><strong>Now<\/strong> run seeder from terminal<\/p>\r\n    <pre class=\"lang-bash\"><code data-language=\"bash\">\r\n    php artisan db:seed\r\n    <\/code><\/pre>\r\n    <p>\r\n        To check data you can use\r\n        <strong\r\n            ><a target=\"_blank\" href=\"https:\/\/laravel.com\/docs\/6.x\/artisan#tinker\"\r\n                >Laravel Tinker shell<\/a\r\n            ><\/strong\r\n        >\r\n    <\/p>\r\n    <pre class=\"lang-php\"><code data-language=\"php\">\r\n    php artisan tinker\r\n\r\n    Psy Shell v0.9.12 (PHP 7.3.3 \u2014 cli) by Justin Hileman\r\n\r\n    --- App\\Task::first()\r\n\r\n    = App\\Task {#3033\r\n    id: 1,\r\n    body: \"Perferendis eligendi magnam explicabo minus deserunt.\",\r\n    completed: 1,\r\n    created_at: \"2020-01-01 02:55:21\",\r\n    updated_at: \"2020-01-01 02:55:21\",\r\n    }\r\n    <\/code><\/pre>\r\n    <p>\r\n        <strong\r\n            >We now have the data and a model to interact with the database.<br\r\n                data-tomark-pass=\"\"\r\n            \/>\r\n            We are now ready to start building the UI to add new tasks to the\r\n            application.<\/strong\r\n        >\r\n    <\/p>\r\n    <p>feel free to comment.<\/p>","img":"ZOTwZYhoNkFZCV5cLA1beqKHLI4MsD0w4BdpVUIa.png","created_at":"2019-09-27T00:00:00.000000Z","updated_at":"2019-09-27T00:00:00.000000Z","updated":"27 Sep 2019"}