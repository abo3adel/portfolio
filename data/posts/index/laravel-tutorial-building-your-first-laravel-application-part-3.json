{"id":3,"user_id":1,"category_id":1,"title":"Laravel Tutorial Building Your First Laravel Application Part 3","slug":"laravel-tutorial-building-your-first-laravel-application-part-3","body":"    <p>\r\n    In the previous post part 2 we learned how to create database table for\r\n    tasks and created a model to control the database<br\r\n        data-tomark-pass=\"\"\r\n    \/><br \/>\r\n    and a (<span class=\"text-info\" data-tomark-pass=\"\"\r\n        >model factory files<\/span\r\n    >\r\n    - <span class=\"text-info\" data-tomark-pass=\"\">database seeder<\/span>) that\r\n    allow us to generate fake model data that we can use to fill our development\r\n    database and tests.\r\n    <\/p>\r\n    <p>now we can continue in our to-do-list application.<\/p>\r\n    <p>now we ready to start building the UI.<\/p>\r\n    <hr \/>\r\n    <p>This Tutorial is divided into parts:<\/p>\r\n    <ol>\r\n    <li>\r\n        <a\r\n            href=\"\/blog\/laravel-tutorial-building-your-first-laravel-application-part-1\"\r\n            >part 1<\/a\r\n        >\r\n    <\/li>\r\n    <li>\r\n        <a\r\n            href=\"\/blog\/laravel-tutorial-building-your-first-laravel-application-part-2\"\r\n            >part 2<\/a\r\n        >\r\n    <\/li>\r\n    <li>\r\n        <strong\r\n            ><span class=\"text-secondary\" data-tomark-pass=\"\"\r\n                >Part 3<\/span\r\n            ><\/strong\r\n        >\r\n    <\/li>\r\n    <li>\r\n        <a\r\n            href=\"\/blog\/laravel-tutorial-building-your-first-laravel-application-part-4\"\r\n            >Part 4<\/a\r\n        >\r\n    <\/li>\r\n    <li>\r\n        <a\r\n            href=\"\/blog\/laravel-tutorial-building-your-first-laravel-application-part-5\"\r\n            >part 5<\/a\r\n        >\r\n    <\/li>\r\n    <\/ol>\r\n    <hr \/>\r\n    <p>\r\n    <strong>Note<\/strong> The complete, finished source code for this project is\r\n    <a href=\"https:\/\/github.com\/abo3adel\/laravel-tutorialyour-first-app\"\r\n        >available on GitHub<\/a\r\n    >.\r\n    <\/p>\r\n    <h2>Routing<\/h2>\r\n    <p>\r\n    To build out a view showing the list of links, we need to update the main\r\n    project route and also define a new route that will display our submission\r\n    form. <br data-tomark-pass=\"\" \/>We can add new routes to our application in\r\n    the <code data-backticks=\"3\">routes\/web.php<\/code> file.\r\n    <\/p>\r\n    <p>In the web routes file you should see the default route below:<\/p>\r\n    <pre class=\"lang-php\"><code data-language=\"php\">\r\n    Route::get('\/', function () {\r\n    return view('welcome');\r\n    });\r\n    <\/code><\/pre>\r\n    <blockquote>\r\n    <p>\r\n        <strong>Note<\/strong> To create a new route we can either use a\r\n        <strong>route closure<\/strong> or a\r\n        <strong>dedicated controller class<\/strong>. In this tutorial, we will\r\n        use closures for our submission and index routes.\r\n    <\/p>\r\n    <\/blockquote>\r\n    <p>\r\n    First, let\u2019s update the home route by getting a collection of tasks from the\r\n    database and passing them to the view:\r\n    <\/p>\r\n    <pre class=\"lang-php\"><code data-language=\"php\">\r\n    Route::get('\/', function () {\r\n    \/\/ load all tasks from database\r\n    $tasks = App\\Task::all();\r\n\r\n    \/\/ inject data into the view\r\n    return view('task.index', ['tasks' =&gt; $tasks]);\r\n    });\r\n    <\/code><\/pre>\r\n    <p>Then create a blade view file<\/p>\r\n    <blockquote>\r\n    <p>\r\n        <strong>Note<\/strong> Laravel uses a Template System called\r\n        <a href=\"https:\/\/laravel.com\/docs\/6.x\/blade\">Blade<\/a>,\r\n        <br data-tomark-pass=\"\" \/>it has very useful features like (Template\r\n        Inheritance - displaying data).\r\n    <\/p>\r\n    <\/blockquote>\r\n    <p>\r\n    <strong>Now<\/strong> open\r\n    <code data-backticks=\"3\">resources\/views<\/code> and create new directory\r\n    <code data-backticks=\"3\">task<\/code> then inside it create new file and call\r\n    it <code data-backticks=\"3\">index.blade.php<\/code\r\n    ><br data-tomark-pass=\"\" \/>we will show the task list in this view file.\r\n    <\/p>\r\n    <p>open <code data-backticks=\"3\">task\/index.blade.php<\/code>:<\/p>\r\n    <pre\r\n    class=\"lang-php\"\r\n    ><code data-language=\"php\">{{-- inherit from app layout --}}\r\n    @extends('layouts\/app')\r\n\r\n\r\n    @section('content')\r\n        &lt;table class=\"table table-striped table-horizontal mx-auto w-75 table-responsive text-white\"&gt;\r\n            &lt;tbody&gt;\r\n                @foreach($tasks as $task)\r\n                    &lt;tr class=\"p-3\"&gt;\r\n                        &lt;td class=\"py-3 w-75 align-middle bg-primary \"&gt;{{$task-&gt;body}}&lt;\/td&gt;\r\n                        &lt;td class=\"bg-primary\"&gt;&lt;\/td&gt;\r\n                        &lt;td class=\"py-3 bg-dark align-middle\"&gt;\r\n                            &lt;a href=\"#\" class='btn btn-success m-'&gt;Complete&lt;\/a&gt;\r\n                            &lt;button class=\"btn btn-danger m-\"&gt;Delete&lt;\/button&gt;\r\n                        &lt;\/td&gt;\r\n                    &lt;\/tr&gt;\r\n                @endforeach\r\n            &lt;\/tbody&gt;\r\n        &lt;\/table&gt;\r\n    @endsection\r\n    <\/code><\/pre>\r\n    <p>\r\n    the app layout file is located at\r\n    <code data-backticks=\"3\">resources\/views\/layouts<\/code>.\r\n    <\/p>\r\n    <p>\r\n    <strong>Now<\/strong> if you visis your app name in browser you should see a\r\n    list of tasks and buttons to modify it.\r\n    <\/p>\r\n    <h2>Completing a task<\/h2>\r\n    <p>\r\n    add new route to update the task complete column<br data-tomark-pass=\"\" \/>\r\n    <\/p>\r\n    <pre class=\"lang-php\"><code data-language=\"php\">\r\n    \/**\r\n     * complete a task\r\n    *\/\r\n    Route::patch('{task}', function (App\\Task $task) {\r\n        \/\/ now task will be loaded in this variable ($task)\r\n        \r\n        $task-&gt;completed = true; \/\/ set completed column to true\r\n\r\n        $task-&gt;update();\r\n\r\n        return back(); \/\/ return to all tasks page\r\n    });\r\n    <\/code><\/pre>\r\n    <p>open <code data-backticks=\"3\">task\/index.blade.php<\/code>:<\/p>\r\n    <p><strong>Replace this<\/strong><\/p>\r\n    <pre\r\n    class=\"lang-html\"\r\n    ><code data-language=\"html\">&lt;a href=\"#\" class='btn btn-success m-'&gt;Complete&lt;\/a&gt;\r\n    <\/code><\/pre>\r\n    <p><strong>with<\/strong><\/p>\r\n    <pre class=\"lang-php\"><code data-language=\"php\">\r\n    @unless ($task-&gt;completed)\r\n    &lt;!-- show this only if task not completed --&gt;\r\n    &lt;form action=\"{{$task-&gt;id}}\" method=\"post\" class=\"d-inline\"&gt;\r\n        &lt;!-- HTML does not has patch or delete method,\r\n        so we use laravel special function --&gt;\r\n        @method('PATCH')\r\n        &lt;!-- add csrf token into our form --&gt;\r\n        @csrf\r\n\r\n        &lt;button type='submit' class=\"btn btn-success mr-2\"&gt;\r\n            Complete\r\n        &lt;\/button&gt;\r\n    &lt;\/form&gt;\r\n    @endunless\r\n    <\/code><\/pre>\r\n    <p>\r\n    In the next part we will create route to delete task and a form to create a\r\n    new one.\r\n    <\/p>","img":"ZOTwZYhoNkFZCV5cLA1beqKHLI4MsD0w4BdpVUIa.png","created_at":"2019-09-30T00:00:00.000000Z","updated_at":"2019-09-30T00:00:00.000000Z","updated":"30 Sep 2019"}