{"id":1,"title":"Tutorial","slug":"tutorial","created_at":"2020-09-25T15:41:00.000000Z","updated_at":"2020-09-25T15:41:00.000000Z","posts":[{"id":1,"user_id":1,"category_id":1,"title":"Laravel Tutorial Building Your First Laravel Application Part 1","slug":"laravel-tutorial-building-your-first-laravel-application-part-1","body":"    <p>\r\n    Laravel is a powerful MVC PHP framework, designed for developers who need a\r\n    simple and elegant toolkit to create full-featured web applications. Laravel\r\n    was created by Taylor Otwell.\r\n    <\/p>\r\n    <p>\r\n    Since its initial release in 2011, Laravel has experienced exponential\r\n    growth. In 2015, it became the most starred PHP framework on GitHub and rose\r\n    to the go-to framework for people all over the world.\r\n    <\/p>\r\n    <hr \/>\r\n    <p>This Tutorial is divided into parts:<\/p>\r\n    <ol>\r\n    <li>\r\n        <strong\r\n            ><span class=\"text-secondary\" data-tomark-pass=\"\"\r\n                >Part 1<\/span\r\n            ><\/strong\r\n        >\r\n    <\/li>\r\n    <li>\r\n        <a\r\n            href=\"\/blog\/laravel-tutorial-building-your-first-laravel-application-part-2\"\r\n            >Part 2<\/a\r\n        >\r\n    <\/li>\r\n    <li>\r\n        <a\r\n            href=\"\/blog\/laravel-tutorial-building-your-first-laravel-application-part-3\"\r\n            >part 3<\/a\r\n        >\r\n    <\/li>\r\n    <li>\r\n        <a\r\n            href=\"\/blog\/laravel-tutorial-building-your-first-laravel-application-part-4\"\r\n            >Part 4<\/a\r\n        >\r\n    <\/li>\r\n    <li>\r\n        <a\r\n            href=\"\/blog\/laravel-tutorial-building-your-first-laravel-application-part-5\"\r\n            >part 5<\/a\r\n        >\r\n    <\/li>\r\n    <\/ol>\r\n    <hr \/>\r\n    <p>\r\n    <strong>Note<\/strong> The complete, finished source code for this project is\r\n    <a\r\n        target=\"_blank\"\r\n        href=\"https:\/\/github.com\/abo3adel\/laravel-tutorialyour-first-app\"\r\n        >available on GitHub<\/a\r\n    >.\r\n    <\/p>\r\n    <h2>Prerequisites<\/h2>\r\n    <ul>\r\n    <li>\r\n        A local PHP environment (<a\r\n            target=\"_blank\"\r\n            href=\"https:\/\/laravel.com\/docs\/6.x\/homestead\"\r\n            >Homestead<\/a\r\n        >,\r\n        <a target=\"_blank\" href=\"https:\/\/laravel.com\/docs\/6.x\/valet\">Valet<\/a>,\r\n        <a target=\"_blank\" href=\"http:\/\/www.wampserver.com\/en\/\">WAMP<\/a>,\r\n        <a target=\"_blank\" href=\"https:\/\/www.apachefriends.org\/index.html\"\r\n            >XAMPP<\/a\r\n        >, <em>etc<\/em>).\r\n    <\/li>\r\n    <li>\r\n        A database. I\u2019ll be using MySQL\r\n        <span class=\"text-muted\" data-tomark-pass=\"\"\r\n            >(installed in wamp or xampp)<\/span\r\n        >.\r\n    <\/li>\r\n    <li>\r\n        <a target=\"_blank\" href=\"https:\/\/getcomposer.org\">Composer<\/a>\r\n        installed.\r\n    <\/li>\r\n    <li>\r\n        <a target=\"_blank\" href=\"https:\/\/phpunit.de\/\">PHPUnit<\/a> installed.\r\n    <\/li>\r\n    <li>\r\n        <a target=\"_blank\" href=\"https:\/\/nodejs.org\/en\/\">Node<\/a> installed.\r\n    <\/li>\r\n    <\/ul>\r\n    <blockquote>\r\n    <p>\r\n        <strong>Note:<\/strong> For the local PHP environment I am using windows\r\n        so <em>Homestead<\/em> or <em>WAMP<\/em> is good for me.\r\n    <\/p>\r\n    <\/blockquote>\r\n    <hr \/>\r\n    <h2>Installation<\/h2>\r\n    <p>\r\n    For managing dependencies, Laravel uses composer. Make sure you have a\r\n    Composer installed on your system before you install Laravel or follow\r\n    below.\r\n    <\/p>\r\n    <ol>\r\n    <li>\r\n        <p><strong>First download and install composer<\/strong><\/p>\r\n        <blockquote>\r\n            <p>\r\n                make sure composer is working, open powershell or cmd or\r\n                terminal and write\r\n            <\/p>\r\n        <\/blockquote>\r\n        <pre class=\"lang-bash\"><code data-language=\"bash\"> composer -v\r\n    <\/code><\/pre>\r\n    <\/li>\r\n    <li>\r\n        <p><strong>Download the Laravel installer<\/strong><\/p>\r\n        <pre\r\n            class=\"lang-bash\"\r\n        ><code data-language=\"bash\">composer global require laravel\/installer\r\n    <\/code><\/pre>\r\n        <blockquote>\r\n            <p>\r\n                Make sure to place Composer's system-wide vendor bin directory\r\n                in your $PATH so the laravel executable can be located by your\r\n                system.\r\n            <\/p>\r\n        <\/blockquote>\r\n        <ul>\r\n            <li>\r\n                <strong>macOS and GNU \/ Linux Distributions:<\/strong>\r\n                <span class=\"text-primary\" data-tomark-pass=\"\">$HOME<\/span\r\n                >\/.composer\/vendor\/bin\r\n            <\/li>\r\n            <li>\r\n                <strong>Windows:<\/strong>\r\n                <span class=\"text-primary\" data-tomark-pass=\"\"\r\n                    >%USERPROFILE%<\/span\r\n                >\\AppData\\Roaming\\Composer\\vendor\\bin\r\n            <\/li>\r\n        <\/ul>\r\n    <\/li>\r\n    <li>\r\n        <p>\r\n            Go to your server root directory or localhost folder. if you\r\n            installed\r\n            <strong\r\n                ><a\r\n                    target=\"_blank\"\r\n                    href=\"https:\/\/www.apachefriends.org\/index.html\"\r\n                    >XAMPP<\/a\r\n                ><\/strong\r\n            >\r\n            &nbsp;<code data-backticks=\"3\">C:\\xampp\\htdocs<\/code> or\r\n            <strong>WAMP<\/strong> &nbsp;<code data-backticks=\"3\"\r\n                >C:\\wamp\\www<\/code\r\n            >\r\n        <\/p>\r\n    <\/li>\r\n    <li>\r\n        <p><strong>Create new laravel project<\/strong><\/p>\r\n        <pre class=\"lang-bash\"><code data-language=\"bash\">\r\n    laravel new [project-name]\r\n\r\n    laravel new tasks\r\n    <\/code><\/pre>\r\n        <blockquote>\r\n            <p>\r\n                This will create a new directory called tasks at server root\r\n                directory and install an stock Laravel project.\r\n            <\/p>\r\n        <\/blockquote>\r\n        <p>\r\n            <strong>Note:<\/strong> if you are using\r\n            <a target=\"_blank\" href=\"https:\/\/www.apachefriends.org\/index.html\"\r\n                >XAMPP<\/a\r\n            >\r\n            then you need to create a virtual host for your project, you can use\r\n            this tool\r\n            <strong\r\n                ><a target=\"_blank\" href=\"https:\/\/github.com\/abo3adel\/vhost\"\r\n                    >vhost<\/a\r\n                ><\/strong\r\n            >.\r\n        <\/p>\r\n    <\/li>\r\n    <li>\r\n        <p>\r\n            <strong\r\n                >now visit your created virtual host name and you should see the\r\n                default Laravel welcome page<\/strong\r\n            >\r\n        <\/p>\r\n        <p>\r\n            <img\r\n                src=\"\/img\/posts\/laravel-landing.png\"\r\n                alt=\"laravel-landing\"\r\n            \/>\r\n        <\/p>\r\n    <\/li>\r\n    <li>\r\n        <p><strong>Configuration<\/strong><\/p>\r\n        <p>\r\n            open <code data-backticks=\"3\">.env<\/code> file and cofigure your\r\n            app.\r\n        <\/p>\r\n        <pre\r\n            class=\"lang-bash\"\r\n        ><code data-language=\"bash\">\r\n    APP_NAME=tasks (or any other name)\r\n    DB_CONNECTION=mysql (or your installed db.. [PostgreSQL, SQLite, SQL Server])\r\n    DB_DATABASE=(database name)\r\n    DB_USERNAME=(your db user name)\r\n    DB_PASSWORD=(your db password)\r\n    <\/code><\/pre>\r\n    <\/li>\r\n    <li>\r\n        <p>\r\n            <strong\r\n                >Now scaffold out the authentication system by running<\/strong\r\n            >\r\n        <\/p>\r\n        <pre\r\n            class=\"lang-bash\"\r\n        ><code data-language=\"bash\">\r\n    composer require laravel\/ui --dev\r\n\r\n    php artisan ui vue --auth\r\n    <\/code><\/pre>\r\n        <blockquote>\r\n            <p>\r\n                Even though this tutorial will not dive into authentication,\r\n                <br data-tomark-pass=\"\" \/>\r\n                <strong>By running this command<\/strong> it will modify our\r\n                views and routes and create a &nbsp;<span\r\n                    class=\"text-primary\"\r\n                    data-tomark-pass=\"\"\r\n                    >resources\/views\/layouts<\/span\r\n                >\r\n                directory containing a base layout for your application.\r\n                <br data-tomark-pass=\"\" \/>\r\n                All of these views use the\r\n                <strong>Bootstrap CSS framework<\/strong>, but you are free to\r\n                customize them however you wish.\r\n            <\/p>\r\n        <\/blockquote>\r\n        <p>\r\n            <strong>Note<\/strong> In order to compile our css &amp; javascript\r\n            files you should run:\r\n        <\/p>\r\n        <pre class=\"lang-bash\"><code data-language=\"bash\">\r\n    npm install\r\n\r\n    npm run dev\r\n    <\/code><\/pre>\r\n    <\/li>\r\n    <\/ol>\r\n    <p>\r\n    Now you can see <strong>Login|Register<\/strong> links on laravel default\r\n    landing page.\r\n    <\/p>\r\n    <hr \/>\r\n    <h3>And that`s it for this part, please tell me your opinion in comments.<\/h3>","img":"ZOTwZYhoNkFZCV5cLA1beqKHLI4MsD0w4BdpVUIa.png","created_at":"2019-09-26T00:00:00.000000Z","updated_at":"2019-09-26T00:00:00.000000Z","updated":"26 Sep 2019"},{"id":2,"user_id":1,"category_id":1,"title":"Laravel Tutorial Building Your First Laravel Application Part 2","slug":"laravel-tutorial-building-your-first-laravel-application-part-2","body":"    <p>\r\n        In the previous post part 1 we learned how to install laravel and get it to\r\n        work.\r\n    <\/p>\r\n    <p>now we will continue in our tasks application.<\/p>\r\n    <p>\r\n        I am attempting to go through the process of creating a new application just\r\n        as I would in a real-world environment.\r\n    <\/p>\r\n    <hr \/>\r\n    <p>This Tutorial is divided into parts:<\/p>\r\n    <ol>\r\n        <li>\r\n            <a\r\n                href=\"\/blog\/laravel-tutorial-building-your-first-laravel-application-part-1\"\r\n                >part 1<\/a\r\n            >\r\n        <\/li>\r\n        <li>\r\n            <strong\r\n                ><span class=\"text-secondary\" data-tomark-pass=\"\"\r\n                    >Part 2<\/span\r\n                ><\/strong\r\n            >\r\n        <\/li>\r\n        <li>\r\n            <a\r\n                href=\"\/blog\/laravel-tutorial-building-your-first-laravel-application-part-3\"\r\n                >part 3<\/a\r\n            >\r\n        <\/li>\r\n        <li>\r\n            <a\r\n                href=\"\/blog\/laravel-tutorial-building-your-first-laravel-application-part-4\"\r\n                >Part 4<\/a\r\n            >\r\n        <\/li>\r\n        <li>\r\n            <a\r\n                href=\"\/blog\/laravel-tutorial-building-your-first-laravel-application-part-5\"\r\n                >part 5<\/a\r\n            >\r\n        <\/li>\r\n    <\/ol>\r\n    <hr \/>\r\n    <p>\r\n        <strong>Note<\/strong> The complete, finished source code for this project is\r\n        <a\r\n            target=\"_blank\"\r\n            href=\"https:\/\/github.com\/abo3adel\/laravel-tutorialyour-first-app\"\r\n            >available on GitHub<\/a\r\n        >.\r\n    <\/p>\r\n    <h2>Planning<\/h2>\r\n    <p>\r\n        <strong\r\n            >For this guide, we are going to be building a to-do-list\r\n            application.<br data-tomark-pass=\"\" \/>\r\n            Here is a list of fundamental goals for this to-do-list app:<\/strong\r\n        >\r\n    <\/p>\r\n    <ol>\r\n        <li>Display a simple list of tasks.<\/li>\r\n        <li>Create a form where people can submit new tasks.<\/li>\r\n        <li>Validate the form.<\/li>\r\n        <li>Insert the data into the database.<\/li>\r\n        <li>Add the ability manage tasks (complete task or delete it).<\/li>\r\n    <\/ol>\r\n    <h2>The First Steps<\/h2>\r\n    <p>\r\n        Navigate to our project folder that we created the\r\n        <a\r\n            target=\"_blank\"\r\n            href=\"\/blog\/posts\/Laravel-Tutorial:-Building-Your-First-Laravel-Application\"\r\n            >previous post<\/a\r\n        >\r\n    <\/p>\r\n    <blockquote>\r\n        <p>\r\n            Even though showing a list of tasks sounds like a small task it still\r\n            requires a database, a database table, data in the table, a database\r\n            query, and a view file.\r\n        <\/p>\r\n    <\/blockquote>\r\n    <h2>Building the App<\/h2>\r\n    <p>\r\n        Creating a migration will be the first step.<br data-tomark-pass=\"\" \/><br \/>\r\n        open your terminal and cd into your project folder, then use laravel artisan\r\n        to create our migration:\r\n    <\/p>\r\n    <pre\r\n        class=\"lang-bash\"\r\n    ><code data-language=\"bash\"> php artisan make:migration create_tasks_table --create=tasks\r\n    <\/code><\/pre>\r\n    <p>\r\n        then go and open\r\n        <code data-backticks=\"3\"\r\n            >database\/migrations\/{{datetime}}_create_tasks_table.php<\/code\r\n        >\r\n        and let`s create out tasks table.<br data-tomark-pass=\"\" \/>\r\n    <\/p>\r\n    <h3>What do we need for a task<\/h3>\r\n    <ol>\r\n        <li>task has body.<\/li>\r\n        <li>\r\n            task can be completed.<br data-tomark-pass=\"\" \/><br \/>\r\n            So our table will be like\r\n        <\/li>\r\n    <\/ol>\r\n    <pre\r\n        class=\"lang-php\"\r\n    ><code data-language=\"php\">\r\n    Schema::create('tasks', function (Blueprint $table) {\r\n        $table-&gt;bigIncrements('id');\r\n        $table-&gt;string('body');\r\n        $table-&gt;boolean('completed')-&gt;default(false);\r\n        $table-&gt;timestamps();\r\n    });\r\n    <\/code><\/pre>\r\n    <p>and type on terminal<\/p>\r\n    <pre class=\"lang-bash\"><code data-language=\"bash\">php artisan migrate\r\n    <\/code><\/pre>\r\n    <p>\r\n        <strong>Note<\/strong> if you have seen an error like\r\n        <code data-backticks=\"3\">Specified key was too long;<\/code>,\r\n        <br data-tomark-pass=\"\" \/>then you can fix it by adding this line into\r\n        <code data-backticks=\"3\">app\/providers\/AppServiceProvider.php<\/code>\r\n    <\/p>\r\n    <pre\r\n        class=\"lang-php\"\r\n    ><code data-language=\"php\">\r\n    use Illuminate\\Support\\Facades\\Schema;\r\n\r\n    public function boot()\r\n    {\r\n        \/\/ -----\r\n        Schema::defaultStringLength(169); \/\/ add this line\r\n    }\r\n    <\/code><\/pre>\r\n    <p>now run<\/p>\r\n    <pre class=\"lang-php\"><code data-language=\"php\">\r\n    php artisan migrate:fresh\r\n    php artisan migrate\r\n    <\/code><\/pre>\r\n    <p>and you table should be created correctly.<\/p>\r\n    <p>\r\n        Next, we need some data and a model to work with our database table.<br\r\n            data-tomark-pass=\"\"\r\n        \/>Laravel provides two features which help with this:<br\r\n            data-tomark-pass=\"\"\r\n        \/>\r\n        <strong>the first<\/strong> is a\r\n        <span class=\"text-info\" data-tomark-pass=\"\">database seeder<\/span>, which\r\n        populates the database with data,<br data-tomark-pass=\"\" \/>\r\n        <strong>The second<\/strong>, the\r\n        <span class=\"text-info\" data-tomark-pass=\"\">model factory files<\/span> that\r\n        allow us to generate fake model data that we can\r\n        <strong>use to fill our development database and tests<\/strong>:\r\n    <\/p>\r\n    <pre\r\n        class=\"lang-bash\"\r\n    ><code data-language=\"bash\"> php artisan make:model -f Task\r\n    <\/code><\/pre>\r\n    <p>\r\n        The --f flag will generate a new factory file in the &nbsp;<code\r\n            data-backticks=\"3\"\r\n            >database\/factories<\/code\r\n        >\r\n        path, in our case a new TaskFactory file will include an empty factory\r\n        definition for our Task model.\r\n    <\/p>\r\n    <pre\r\n        class=\"lang-php\"\r\n    ><code data-language=\"php\">\r\n    \/** @var \\Illuminate\\Database\\Eloquent\\Factory $factory *\/\r\n\r\n    use App\\Task;\r\n    use Faker\\Generator as Faker;\r\n\r\n    $factory-&gt;define(Task::class, function (Faker $faker) {\r\n        return [\r\n            'body' =&gt; $faker-&gt;sentence,\r\n            'completed' =&gt; false \/\/ true || false\r\n        ];\r\n    });\r\n\r\n    <\/code><\/pre>\r\n    <p>\r\n        We use the &nbsp;<code data-backticks=\"3\">$faker-&gt;sentence<\/code> to\r\n        create random task body.<br data-tomark-pass=\"\" \/><br \/>\r\n        Then we will need an database seeder to run our factory\r\n    <\/p>\r\n    <pre\r\n        class=\"lang-bash\"\r\n    ><code data-language=\"bash\">php artisan make:seeder TaskTableSeeder\r\n    <\/code><\/pre>\r\n    <p>\r\n        now go to &nbsp;<code data-backticks=\"3\">database\/seeds<\/code> and open\r\n        &nbsp;<code data-backticks=\"3\">TaskTableSeeder.php<\/code>\r\n    <\/p>\r\n    <pre\r\n        class=\"lang-php\"\r\n    ><code data-language=\"php\">factory(Task::class, 7)-&gt;create(); \/\/ will create 7 tasks\r\n    <\/code><\/pre>\r\n    <p>\r\n        In order to \"activate\" the TaskTableSeeder, we need to call it from the main\r\n        &nbsp;<code data-backticks=\"3\">database\/seeds\/DatabaseSeeder.php<\/code> run\r\n        method:\r\n    <\/p>\r\n    <pre class=\"lang-php\"><code data-language=\"php\">\r\n    public function run()\r\n    {\r\n        $this-&gt;call(TaskTableSeeder::class);\r\n    }\r\n    <\/code><\/pre>\r\n    <p><strong>Now<\/strong> run seeder from terminal<\/p>\r\n    <pre class=\"lang-bash\"><code data-language=\"bash\">\r\n    php artisan db:seed\r\n    <\/code><\/pre>\r\n    <p>\r\n        To check data you can use\r\n        <strong\r\n            ><a target=\"_blank\" href=\"https:\/\/laravel.com\/docs\/6.x\/artisan#tinker\"\r\n                >Laravel Tinker shell<\/a\r\n            ><\/strong\r\n        >\r\n    <\/p>\r\n    <pre class=\"lang-php\"><code data-language=\"php\">\r\n    php artisan tinker\r\n\r\n    Psy Shell v0.9.12 (PHP 7.3.3 \u2014 cli) by Justin Hileman\r\n\r\n    --- App\\Task::first()\r\n\r\n    = App\\Task {#3033\r\n    id: 1,\r\n    body: \"Perferendis eligendi magnam explicabo minus deserunt.\",\r\n    completed: 1,\r\n    created_at: \"2020-01-01 02:55:21\",\r\n    updated_at: \"2020-01-01 02:55:21\",\r\n    }\r\n    <\/code><\/pre>\r\n    <p>\r\n        <strong\r\n            >We now have the data and a model to interact with the database.<br\r\n                data-tomark-pass=\"\"\r\n            \/>\r\n            We are now ready to start building the UI to add new tasks to the\r\n            application.<\/strong\r\n        >\r\n    <\/p>\r\n    <p>feel free to comment.<\/p>","img":"ZOTwZYhoNkFZCV5cLA1beqKHLI4MsD0w4BdpVUIa.png","created_at":"2019-09-27T00:00:00.000000Z","updated_at":"2019-09-27T00:00:00.000000Z","updated":"27 Sep 2019"},{"id":3,"user_id":1,"category_id":1,"title":"Laravel Tutorial Building Your First Laravel Application Part 3","slug":"laravel-tutorial-building-your-first-laravel-application-part-3","body":"    <p>\r\n    In the previous post part 2 we learned how to create database table for\r\n    tasks and created a model to control the database<br\r\n        data-tomark-pass=\"\"\r\n    \/><br \/>\r\n    and a (<span class=\"text-info\" data-tomark-pass=\"\"\r\n        >model factory files<\/span\r\n    >\r\n    - <span class=\"text-info\" data-tomark-pass=\"\">database seeder<\/span>) that\r\n    allow us to generate fake model data that we can use to fill our development\r\n    database and tests.\r\n    <\/p>\r\n    <p>now we can continue in our to-do-list application.<\/p>\r\n    <p>now we ready to start building the UI.<\/p>\r\n    <hr \/>\r\n    <p>This Tutorial is divided into parts:<\/p>\r\n    <ol>\r\n    <li>\r\n        <a\r\n            href=\"\/blog\/laravel-tutorial-building-your-first-laravel-application-part-1\"\r\n            >part 1<\/a\r\n        >\r\n    <\/li>\r\n    <li>\r\n        <a\r\n            href=\"\/blog\/laravel-tutorial-building-your-first-laravel-application-part-2\"\r\n            >part 2<\/a\r\n        >\r\n    <\/li>\r\n    <li>\r\n        <strong\r\n            ><span class=\"text-secondary\" data-tomark-pass=\"\"\r\n                >Part 3<\/span\r\n            ><\/strong\r\n        >\r\n    <\/li>\r\n    <li>\r\n        <a\r\n            href=\"\/blog\/laravel-tutorial-building-your-first-laravel-application-part-4\"\r\n            >Part 4<\/a\r\n        >\r\n    <\/li>\r\n    <li>\r\n        <a\r\n            href=\"\/blog\/laravel-tutorial-building-your-first-laravel-application-part-5\"\r\n            >part 5<\/a\r\n        >\r\n    <\/li>\r\n    <\/ol>\r\n    <hr \/>\r\n    <p>\r\n    <strong>Note<\/strong> The complete, finished source code for this project is\r\n    <a href=\"https:\/\/github.com\/abo3adel\/laravel-tutorialyour-first-app\"\r\n        >available on GitHub<\/a\r\n    >.\r\n    <\/p>\r\n    <h2>Routing<\/h2>\r\n    <p>\r\n    To build out a view showing the list of links, we need to update the main\r\n    project route and also define a new route that will display our submission\r\n    form. <br data-tomark-pass=\"\" \/>We can add new routes to our application in\r\n    the <code data-backticks=\"3\">routes\/web.php<\/code> file.\r\n    <\/p>\r\n    <p>In the web routes file you should see the default route below:<\/p>\r\n    <pre class=\"lang-php\"><code data-language=\"php\">\r\n    Route::get('\/', function () {\r\n    return view('welcome');\r\n    });\r\n    <\/code><\/pre>\r\n    <blockquote>\r\n    <p>\r\n        <strong>Note<\/strong> To create a new route we can either use a\r\n        <strong>route closure<\/strong> or a\r\n        <strong>dedicated controller class<\/strong>. In this tutorial, we will\r\n        use closures for our submission and index routes.\r\n    <\/p>\r\n    <\/blockquote>\r\n    <p>\r\n    First, let\u2019s update the home route by getting a collection of tasks from the\r\n    database and passing them to the view:\r\n    <\/p>\r\n    <pre class=\"lang-php\"><code data-language=\"php\">\r\n    Route::get('\/', function () {\r\n    \/\/ load all tasks from database\r\n    $tasks = App\\Task::all();\r\n\r\n    \/\/ inject data into the view\r\n    return view('task.index', ['tasks' =&gt; $tasks]);\r\n    });\r\n    <\/code><\/pre>\r\n    <p>Then create a blade view file<\/p>\r\n    <blockquote>\r\n    <p>\r\n        <strong>Note<\/strong> Laravel uses a Template System called\r\n        <a href=\"https:\/\/laravel.com\/docs\/6.x\/blade\">Blade<\/a>,\r\n        <br data-tomark-pass=\"\" \/>it has very useful features like (Template\r\n        Inheritance - displaying data).\r\n    <\/p>\r\n    <\/blockquote>\r\n    <p>\r\n    <strong>Now<\/strong> open\r\n    <code data-backticks=\"3\">resources\/views<\/code> and create new directory\r\n    <code data-backticks=\"3\">task<\/code> then inside it create new file and call\r\n    it <code data-backticks=\"3\">index.blade.php<\/code\r\n    ><br data-tomark-pass=\"\" \/>we will show the task list in this view file.\r\n    <\/p>\r\n    <p>open <code data-backticks=\"3\">task\/index.blade.php<\/code>:<\/p>\r\n    <pre\r\n    class=\"lang-php\"\r\n    ><code data-language=\"php\">{{-- inherit from app layout --}}\r\n    @extends('layouts\/app')\r\n\r\n\r\n    @section('content')\r\n        &lt;table class=\"table table-striped table-horizontal mx-auto w-75 table-responsive text-white\"&gt;\r\n            &lt;tbody&gt;\r\n                @foreach($tasks as $task)\r\n                    &lt;tr class=\"p-3\"&gt;\r\n                        &lt;td class=\"py-3 w-75 align-middle bg-primary \"&gt;{{$task-&gt;body}}&lt;\/td&gt;\r\n                        &lt;td class=\"bg-primary\"&gt;&lt;\/td&gt;\r\n                        &lt;td class=\"py-3 bg-dark align-middle\"&gt;\r\n                            &lt;a href=\"#\" class='btn btn-success m-'&gt;Complete&lt;\/a&gt;\r\n                            &lt;button class=\"btn btn-danger m-\"&gt;Delete&lt;\/button&gt;\r\n                        &lt;\/td&gt;\r\n                    &lt;\/tr&gt;\r\n                @endforeach\r\n            &lt;\/tbody&gt;\r\n        &lt;\/table&gt;\r\n    @endsection\r\n    <\/code><\/pre>\r\n    <p>\r\n    the app layout file is located at\r\n    <code data-backticks=\"3\">resources\/views\/layouts<\/code>.\r\n    <\/p>\r\n    <p>\r\n    <strong>Now<\/strong> if you visis your app name in browser you should see a\r\n    list of tasks and buttons to modify it.\r\n    <\/p>\r\n    <h2>Completing a task<\/h2>\r\n    <p>\r\n    add new route to update the task complete column<br data-tomark-pass=\"\" \/>\r\n    <\/p>\r\n    <pre class=\"lang-php\"><code data-language=\"php\">\r\n    \/**\r\n     * complete a task\r\n    *\/\r\n    Route::patch('{task}', function (App\\Task $task) {\r\n        \/\/ now task will be loaded in this variable ($task)\r\n        \r\n        $task-&gt;completed = true; \/\/ set completed column to true\r\n\r\n        $task-&gt;update();\r\n\r\n        return back(); \/\/ return to all tasks page\r\n    });\r\n    <\/code><\/pre>\r\n    <p>open <code data-backticks=\"3\">task\/index.blade.php<\/code>:<\/p>\r\n    <p><strong>Replace this<\/strong><\/p>\r\n    <pre\r\n    class=\"lang-html\"\r\n    ><code data-language=\"html\">&lt;a href=\"#\" class='btn btn-success m-'&gt;Complete&lt;\/a&gt;\r\n    <\/code><\/pre>\r\n    <p><strong>with<\/strong><\/p>\r\n    <pre class=\"lang-php\"><code data-language=\"php\">\r\n    @unless ($task-&gt;completed)\r\n    &lt;!-- show this only if task not completed --&gt;\r\n    &lt;form action=\"{{$task-&gt;id}}\" method=\"post\" class=\"d-inline\"&gt;\r\n        &lt;!-- HTML does not has patch or delete method,\r\n        so we use laravel special function --&gt;\r\n        @method('PATCH')\r\n        &lt;!-- add csrf token into our form --&gt;\r\n        @csrf\r\n\r\n        &lt;button type='submit' class=\"btn btn-success mr-2\"&gt;\r\n            Complete\r\n        &lt;\/button&gt;\r\n    &lt;\/form&gt;\r\n    @endunless\r\n    <\/code><\/pre>\r\n    <p>\r\n    In the next part we will create route to delete task and a form to create a\r\n    new one.\r\n    <\/p>","img":"ZOTwZYhoNkFZCV5cLA1beqKHLI4MsD0w4BdpVUIa.png","created_at":"2019-09-28T00:00:00.000000Z","updated_at":"2019-09-28T00:00:00.000000Z","updated":"28 Sep 2019"},{"id":4,"user_id":1,"category_id":1,"title":"Laravel Tutorial Building Your First Laravel Application Part 4","slug":"laravel-tutorial-building-your-first-laravel-application-part-4","body":"    <p>\r\n    In the previous post part 3, We created the to-do-list and showed it in our\r\n    homepage.\r\n    <\/p>\r\n    <p>then we builded a form to complete any task.<\/p>\r\n    <p>\r\n    now we will build the delete task route and a form to create new task with\r\n    validation in mind to keep form safe\r\n    <\/p>\r\n    <p>now we can finish this project.<\/p>\r\n    <hr \/>\r\n    <p>This Tutorial is divided into parts:<\/p>\r\n    <ol>\r\n    <li>\r\n        <a\r\n            href=\"\/blog\/laravel-tutorial-building-your-first-laravel-application-part-1\"\r\n            >part 1<\/a\r\n        >\r\n    <\/li>\r\n    <li>\r\n        <a\r\n            href=\"\/blog\/laravel-tutorial-building-your-first-laravel-application-part-2\"\r\n            >part 2<\/a\r\n        >\r\n    <\/li>\r\n    <li>\r\n        <a\r\n            href=\"\/blog\/laravel-tutorial-building-your-first-laravel-application-part-3\"\r\n            >part 3<\/a\r\n        >\r\n    <\/li>\r\n    <li>\r\n        <strong\r\n            ><span class=\"text-secondary\" data-tomark-pass=\"\"\r\n                >Part 4<\/span\r\n            ><\/strong\r\n        >\r\n    <\/li>\r\n    <li>\r\n        <a\r\n            href=\"\/blog\/laravel-tutorial-building-your-first-laravel-application-part-5\"\r\n            >part 5<\/a\r\n        >\r\n    <\/li>\r\n    <\/ol>\r\n    <hr \/>\r\n    <p>\r\n    <strong>Note<\/strong> The complete, finished source code for this project is\r\n    <a\r\n        target=\"_blank\"\r\n        href=\"https:\/\/github.com\/abo3adel\/laravel-tutorialyour-first-app\"\r\n        >available on GitHub<\/a\r\n    >.\r\n    <\/p>\r\n    <h2>Deleting a task<\/h2>\r\n    <p>create a route for delete:<\/p>\r\n    <pre class=\"lang-php\"><code data-language=\"php\">\r\n    \/**\r\n    * Delete a task\r\n    *\/\r\n    Route::delete('{task}', function (App\\Task $task) {\r\n    $task-&gt;delete();\r\n\r\n    return back();\r\n    });\r\n    <\/code><\/pre>\r\n    <p>\r\n    and let`s create our form in\r\n    <code data-backticks=\"3\">task\/index.blade.php<\/code>\r\n    <\/p>\r\n    <p><strong>Replace<\/strong> this line<\/p>\r\n    <pre\r\n    class=\"lang-php\"\r\n    ><code data-language=\"php\">&lt;button class=\"btn btn-danger m-\"&gt;Delete&lt;\/button&gt;\r\n    <\/code><\/pre>\r\n    <p><strong>With this<\/strong><\/p>\r\n    <pre\r\n    class=\"lang-php\"\r\n    ><code data-language=\"php\">\r\n    &lt;form action=\"{{$task-&gt;id}}\" method=\"post\" class=\"d-inline\"&gt;\r\n    @method('DELETE')\r\n    @csrf\r\n    &lt;button type=\"submit\" class=\"btn btn-danger\"&gt;Delete&lt;\/button&gt;\r\n    &lt;\/form&gt;\r\n    <\/code><\/pre>\r\n    <p>\r\n    <strong>Now<\/strong> try to complete or delete a task and see if every thing\r\n    is working correctly.\r\n    <\/p>\r\n    <h2>Adding new task<\/h2>\r\n    <p>to add a new task we will add a route with post method<\/p>\r\n    <pre class=\"lang-php\"><code data-language=\"php\">\r\n    \/**\r\n    * Add new Task\r\n    *\/\r\n    Route::post('\/', function () {\r\n    \/\/ validate task body\r\n\r\n    \/\/ save task\r\n    App\\Task::create([\r\n        'body' =&gt; request('body')\r\n    ]);\r\n\r\n    \/\/ return to home page\r\n    return back();\r\n    });\r\n    <\/code><\/pre>\r\n    <p>\r\n    and create new task form will be in\r\n    <code data-backticks=\"3\">task\/index.blade.php<\/code>\r\n    <\/p>\r\n    <pre class=\"lang-php\"><code data-language=\"php\">\r\n    @section('content')\r\n\r\n    &lt;!-- add this --&gt;\r\n    &lt;div class=\"card w-75 mx-auto mb-4\"&gt;\r\n    &lt;div class=\"card-header bg-primary text-light\"&gt;\r\n        Add Task\r\n    &lt;\/div&gt;\r\n    &lt;div class=\"card-body\"&gt;\r\n        &lt;form action=\"\/\" method=\"post\" \r\n        class=\"form-inline mx-auto w-75\"&gt;\r\n\r\n            @csrf\r\n\r\n            &lt;div class=\"form-group w-75\"&gt;\r\n                &lt;input type=\"text\" name=\"body\" \r\n                class=\"form-control w-100\" \r\n                placeholder=\"Task Body\" \/&gt;\r\n            &lt;\/div&gt;\r\n\r\n            &lt;div class=\"form-group\"&gt;\r\n                &lt;button type=\"submit\" \r\n                class=\"btn btn-primary mx-3\"&gt;\r\n                    Save\r\n                &lt;\/button&gt;\r\n            &lt;\/div&gt;\r\n        &lt;\/form&gt;\r\n    &lt;\/div&gt;\r\n    &lt;\/div&gt;\r\n    <\/code><\/pre>\r\n    <h3>First validate our task<\/h3>\r\n    <p>\r\n    if you submitted new task form you will see an\r\n    <strong\r\n        ><a\r\n            target=\"_blank\"\r\n            href=\"https:\/\/laravel.com\/docs\/6.x\/eloquent#mass-assignment\"\r\n            >Mass Assignment<\/a\r\n        ><\/strong\r\n    >\r\n    error like:\r\n    <\/p>\r\n    <pre\r\n    class=\"lang-bash\"\r\n    ><code data-language=\"bash\">  Add [body] to fillable property to allow mass assignment on [App\\Task].\r\n    <\/code><\/pre>\r\n    <blockquote>\r\n    <p>\r\n        A\r\n        <strong\r\n            ><a\r\n                target=\"_blank\"\r\n                href=\"https:\/\/laravel.com\/docs\/6.x\/eloquent#mass-assignment\"\r\n                >Mass Assignment<\/a\r\n            ><\/strong\r\n        >\r\n        error occures when we try to change a column in database after\r\n        submitting a form.\r\n    <\/p>\r\n    <\/blockquote>\r\n    <p>\r\n    so to <strong>fix<\/strong> our error, open\r\n    <code data-backticks=\"3\">app\/Task.php<\/code> and add this inside the class:\r\n    <\/p>\r\n    <pre\r\n    class=\"lang-php\"\r\n    ><code data-language=\"php\">  protected $fillable = ['body'];\r\n    <\/code><\/pre>\r\n    <p><strong>Now again<\/strong> try to create new task and it should work<\/p>\r\n    <blockquote>\r\n    <p>\r\n        <strong>Note<\/strong> if tried to submit the form without writing any\r\n        text it will still pass and give you an error like\r\n        <code data-backticks=\"3\">Column 'body' cannot be null<\/code\r\n        ><br data-tomark-pass=\"\" \/><strong>So<\/strong> we need to validate our\r\n        data before saving it.\r\n    <\/p>\r\n    <\/blockquote>\r\n    <p>\r\n    <strong>Read<\/strong> more about validation at\r\n    <a target=\"_blank\" href=\"https:\/\/laravel.com\/docs\/6.x\/validation\"\r\n        >Laravel Validation<\/a\r\n    >\r\n    <\/p>\r\n    <p>in <code data-backticks=\"3\">routes\/web.php<\/code><\/p>\r\n    <pre class=\"lang-php\"><code data-language=\"php\">\r\n    \/\/ validate task body\r\n    $body = request()-&gt;validate([\r\n    'body' =&gt; 'required|string|max:255'\r\n    ])['body'];\r\n\r\n    \/\/ save task\r\n    App\\Task::create([\r\n    'body' =&gt; $body\r\n    ]);\r\n    <\/code><\/pre>\r\n    <p>\r\n    if you tried to resubmit the form without any data it will just return to\r\n    homepage,<br data-tomark-pass=\"\" \/><strong>But<\/strong> How to show the\r\n    errors\r\n    <\/p>\r\n    <p>\r\n    in <code data-backticks=\"3\">task\/index.blade.php<\/code> add this before our\r\n    form\r\n    <\/p>\r\n    <pre class=\"lang-php\"><code data-language=\"php\">\r\n    @if ($errors-&gt;any())\r\n    &lt;div class=\"alert alert-danger w-75 mx-auto font-weight-bold\"&gt;\r\n        Please fix the following errors:&lt;br \/&gt;\r\n        @foreach ($errors-&gt;all() as $err)\r\n            &lt;span class='ml-3'&gt;* {{$err}}&lt;\/span&gt;&lt;br \/&gt;\r\n        @endforeach\r\n    &lt;\/div&gt;\r\n    @endif\r\n    <\/code><\/pre>\r\n    <p>and <strong>Replace<\/strong> this line<\/p>\r\n    <pre\r\n    class=\"lang-html\"\r\n    ><code data-language=\"html\">&lt;input type=\"text\" name=\"body\" class=\"form-control w-100\" placeholder=\"Task Body\" \/&gt;\r\n    <\/code><\/pre>\r\n    <p>with this<\/p>\r\n    <pre\r\n    class=\"lang-php\"\r\n    ><code data-language=\"php\">&lt;input type=\"text\" name=\"body\" class=\"form-control w-100 {{$errors-&gt;has('body') ? 'is-invalid' : ''}}\" placeholder=\"Task Body\" \/&gt;\r\n    <\/code><\/pre>\r\n    <p>\r\n    <strong>Now<\/strong> our application should be working successfully as we\r\n    planned,<br data-tomark-pass=\"\" \/>\r\n    In the next part i will show you how you can test this form.<br\r\n        data-tomark-pass=\"\"\r\n    \/>\r\n    <\/p>","img":"ZOTwZYhoNkFZCV5cLA1beqKHLI4MsD0w4BdpVUIa.png","created_at":"2019-09-29T00:00:00.000000Z","updated_at":"2019-09-29T00:00:00.000000Z","updated":"29 Sep 2019"},{"id":5,"user_id":1,"category_id":1,"title":"Laravel Tutorial Building Your First Laravel Application Part 5","slug":"laravel-tutorial-building-your-first-laravel-application-part-5","body":"    <p>\r\n        In the previous post part 4, we created route the task deleteing route<br\r\n            data-tomark-pass=\"\"\r\n        \/>\r\n        and a form to create new tasks with validation in mind.\r\n    <\/p>\r\n    <p>\r\n        but now what if after some time you wanted to add new input to the task\r\n        form, will you test all form conditions every time you add some new\r\n        feature.<br data-tomark-pass=\"\" \/>\r\n    <\/p>\r\n    <p>Well That`s why we need to create tests.<\/p>\r\n    <hr \/>\r\n    <p>This Tutorial is divided into parts:<\/p>\r\n    <ol>\r\n        <li>\r\n            <a\r\n                href=\"\/blog\/laravel-tutorial-building-your-first-laravel-application-part-1\"\r\n                >part 1<\/a\r\n            >\r\n        <\/li>\r\n        <li>\r\n            <a\r\n                href=\"\/blog\/laravel-tutorial-building-your-first-laravel-application-part-2\"\r\n                >part 2<\/a\r\n            >\r\n        <\/li>\r\n        <li>\r\n            <a\r\n                href=\"\/blog\/laravel-tutorial-building-your-first-laravel-application-part-3\"\r\n                >part 3<\/a\r\n            >\r\n        <\/li>\r\n        <li>\r\n            <a\r\n                href=\"\/blog\/laravel-tutorial-building-your-first-laravel-application-part-4\"\r\n                >part 4<\/a\r\n            >\r\n        <\/li>\r\n        <li>\r\n            <strong\r\n                ><span class=\"text-secondary\" data-tomark-pass=\"\"\r\n                    >Part 5 (Last)<\/span\r\n                ><\/strong\r\n            >\r\n        <\/li>\r\n    <\/ol>\r\n    <hr \/>\r\n    <p>\r\n        <strong>Note<\/strong> The complete, finished source code for this project is\r\n        <a\r\n            target=\"_blank\"\r\n            href=\"https:\/\/github.com\/abo3adel\/laravel-tutorialyour-first-app\"\r\n            >available on GitHub<\/a\r\n        >.\r\n    <\/p>\r\n    <h2>Testing the Form Submission<\/h2>\r\n    <p>\r\n        Laravel makes HTTP testing a breeze for performing integration tests against\r\n        routes and middleware, so let\u2019s write a few feature tests to verify our code\r\n        works as expected.\r\n    <\/p>\r\n    <p>\r\n        <strong>First<\/strong>, delete this file\r\n        <code data-backticks=\"3\">tests\/Feature\/ExampleTest.php<\/code>\r\n    <\/p>\r\n    <p>\r\n        <strong>Then<\/strong> create our task test file<br\r\n            data-tomark-pass=\"\"\r\n        \/><br \/>\r\n        run this command\r\n    <\/p>\r\n    <pre\r\n        class=\"lang-bash\"\r\n    ><code data-language=\"bash\">  php artisan make:test AddingNewTaskTest\r\n    <\/code><\/pre>\r\n    <h2>Writing our tests<\/h2>\r\n    <p>\r\n        open our created file\r\n        <code data-backticks=\"3\">tests\/Feature\/AddingNewTaskTest.php<\/code>, and\r\n        remove any thing inside the class.\r\n    <\/p>\r\n    <h3>our tests<\/h3>\r\n    <ul>\r\n        <li>any one can add new task.<\/li>\r\n        <li>saving fails if no task body provided.<\/li>\r\n        <li>saving fails if task body exceeded max length (255 character).<\/li>\r\n        <li>task is created if validation passed.<\/li>\r\n    <\/ul>\r\n    <p><strong>Firstly<\/strong> let`s start writing our first test<\/p>\r\n    <pre\r\n        class=\"lang-php\"\r\n    ><code data-language=\"php\">\r\n    use RefreshDatabase; \/\/ empty database after every task\r\n    use WithFaker; \/\/ use faker to produce fake data\r\n\r\n    public function testAnyOneCanCreateTask()\r\n    {\r\n        \/\/ create fake task body\r\n        $task = [\r\n            'body' =&gt; $this-&gt;faker-&gt;sentence\r\n        ];\r\n\r\n        \/\/ submit the new task form\r\n        $this-&gt;post('\/', $task)\r\n            -&gt;assertRedirect('\/');\r\n\r\n        \/\/ check if new task was saved into database\r\n        $this-&gt;assertDatabaseHas('tasks', $task);\r\n\r\n        \/\/ visit homepage and see if this task was shown\r\n        $this-&gt;get('\/')\r\n            -&gt;assertSee($task['body']);\r\n    }\r\n    <\/code><\/pre>\r\n    <p>\r\n        <strong>Then<\/strong> to see our test results, we run this command after\r\n        every test\r\n    <\/p>\r\n    <pre class=\"lang-bash\"><code data-language=\"bash\">vendor\\bin\\phpunit\r\n    <\/code><\/pre>\r\n    <p>you should see now that all tests passed.<\/p>\r\n    <p>\r\n        <strong>Secondly<\/strong> we will test that task should not be added if no\r\n        body provided to the form.\r\n    <\/p>\r\n    <pre\r\n        class=\"lang-php\"\r\n    ><code data-language=\"php\">\r\n        public function testSavingFailsIfNoTaskBodyProvided()\r\n        {\r\n            $this-&gt;post('\/', [])-&gt;assertSessionHasErrors('body');\r\n        }\r\n    <\/code><\/pre>\r\n    <p>\r\n        <strong>Thirdly<\/strong> we will test that task should not be added if task\r\n        body length exceeded 255 characters.\r\n    <\/p>\r\n    <pre\r\n        class=\"lang-php\"\r\n    ><code data-language=\"php\">\r\n        public function testSavingFailsIfTaskBodyLengthExceededMaxLength()\r\n        {\r\n            \/\/ create a task body with length more than 255 characters\r\n            $task = [\r\n                'body' =&gt; $this-&gt;faker-&gt;words(150, true)\r\n            ];\r\n\r\n            $this-&gt;post('\/', $task)-&gt;assertSessionHasErrors('body');\r\n\r\n            \/\/ check that this task was not saved into database\r\n            $this-&gt;assertDatabaseMissing('tasks', $task);\r\n        }\r\n    <\/code><\/pre>\r\n    <p>\r\n        <strong>Lastly<\/strong> we will test that task should be saved if validation\r\n        passed.\r\n    <\/p>\r\n    <pre\r\n        class=\"lang-php\"\r\n    ><code data-language=\"php\">\r\n        public function testTaskIsCreatedIfValidationPassed()\r\n        {\r\n            $task = [\r\n                'body' =&gt; $this-&gt;faker-&gt;text(255)\r\n            ];\r\n\r\n            $this-&gt;post('\/', $task)\r\n                -&gt;assertRedirect('\/');\r\n\r\n            $this-&gt;assertDatabaseHas('tasks', $task);\r\n\r\n            $this-&gt;get('\/')\r\n                -&gt;assertSee($task['body']);\r\n        }\r\n    <\/code><\/pre>\r\n    <h2>Conclusion<\/h2>\r\n    <p>\r\n        Congratulations on making it through the tutorial. This guide was designed\r\n        to get you started on building your app, and you can use this as a building\r\n        block to gain the skills you need to develop your application. I know this\r\n        covers a lot of features and can be overwhelming if you are not familiar\r\n        with the framework.\r\n    <\/p>\r\n    <p><strong>Make sure to visit these Resources<\/strong><\/p>\r\n    <ul>\r\n        <li>\r\n            <a target=\"_blank\" href=\"https:\/\/laravel.com\/docs\/6.x\"\r\n                >Laravel Documentation<\/a\r\n            >\r\n        <\/li>\r\n        <li>\r\n            <a target=\"_blank\" href=\"https:\/\/laravel.com\/docs\/5.1\/quickstart\"\r\n                >Basic Task List<\/a\r\n            >\r\n            <span class=\"text-muted text-sm\" data-tomark-pass=\"\">laravel 5.1<\/span>\r\n        <\/li>\r\n        <li>\r\n            <a\r\n                target=\"_blank\"\r\n                href=\"https:\/\/laravel-news.com\/your-first-laravel-application\"\r\n                >LaravelNews Tutorial<\/a\r\n            >\r\n        <\/li>\r\n    <\/ul>","img":"ZOTwZYhoNkFZCV5cLA1beqKHLI4MsD0w4BdpVUIa.png","created_at":"2019-09-30T00:00:00.000000Z","updated_at":"2019-09-30T00:00:00.000000Z","updated":"30 Sep 2019"}]}